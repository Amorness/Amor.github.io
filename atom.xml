<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amor Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.amorness.com/"/>
  <updated>2019-08-12T03:59:20.984Z</updated>
  <id>https://www.amorness.com/</id>
  
  <author>
    <name>JIE YU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构：队列&amp;栈</title>
    <link href="https://www.amorness.com/2019/08/12/leetcodestudy1/"/>
    <id>https://www.amorness.com/2019/08/12/leetcodestudy1/</id>
    <published>2019-08-12T01:54:16.000Z</published>
    <updated>2019-08-12T03:59:20.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小白的LeetCode探索之路：队列-amp-栈"><a href="#小白的LeetCode探索之路：队列-amp-栈" class="headerlink" title="小白的LeetCode探索之路：队列&amp;栈"></a>小白的LeetCode探索之路：队列&amp;栈</h1><p>鉴于暑期被实验室发配帝都实习两个月，在公司摸鱼的时候感到自己明年就要准备面试，于是乎准备刷LeetCode。但是鉴于本身算法基础不是很扎实，所以打算先对一些基础的数据结构进行一些复习。</p><hr><a id="more"></a><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><img src="/2019/08/12/leetcodestudy1/1.png"></p><p>队列是一种<strong>FIFO（先入先出）</strong>的数据结构，在 FIFO 数据结构中，将<strong>首先处理添加到队列中的第一个元素</strong>。</p><p>如上图所示，插入（insert）操作也称作入队（enqueue），新元素始终被添加在队列的末尾。 删除（delete）操作也被称为出队（dequeue)。 你只能移除第一个元素。</p><h3 id="队列-实现"><a href="#队列-实现" class="headerlink" title="队列-实现"></a>队列-实现</h3><p>为了实现队列，我们可以使用动态数组和指向队列头部的索引。</p><p>如上所述，队列应支持两种操作：入队和出队。入队会向队列追加一个新元素，而出队会删除第一个元素。 所以我们需要一个索引来指出起点。</p><p><strong>java版：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "static void main" must be defined in a public class.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// store elements</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; data;         </span><br><span class="line">    <span class="comment">// a pointer to indicate the start position</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p_start;            </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        p_start = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Insert an element into the queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        data.add(x);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;;    </span><br><span class="line">    <span class="comment">/** Delete an element from the queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p_start++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Get the front item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.get(p_start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Checks whether the queue is empty or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p_start &gt;= data.size();</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue q = <span class="keyword">new</span> MyQueue();</span><br><span class="line">        q.enQueue(<span class="number">5</span>);</span><br><span class="line">        q.enQueue(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (q.isEmpty() == <span class="keyword">false</span>) &#123;</span><br><span class="line">            System.out.println(q.Front());</span><br><span class="line">        &#125;</span><br><span class="line">        q.deQueue();</span><br><span class="line">        <span class="keyword">if</span> (q.isEmpty() == <span class="keyword">false</span>) &#123;</span><br><span class="line">            System.out.println(q.Front());</span><br><span class="line">        &#125;</span><br><span class="line">        q.deQueue();</span><br><span class="line">        <span class="keyword">if</span> (q.isEmpty() == <span class="keyword">false</span>) &#123;</span><br><span class="line">            System.out.println(q.Front());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++版：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">// store elements</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;       </span><br><span class="line">        <span class="comment">// a pointer to indicate the start position</span></span><br><span class="line">        <span class="keyword">int</span> p_start;            </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        MyQueue() &#123;p_start = <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="comment">/** Insert an element into the queue. Return true if the operation is successful. */</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            data.push_back(x);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** Delete an element from the queue. Return true if the operation is successful. */</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p_start++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/** Get the front item from the queue. */</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data[p_start];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/** Checks whether the queue is empty or not. */</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p_start &gt;= data.size();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyQueue q;</span><br><span class="line">    q.enQueue(<span class="number">5</span>);</span><br><span class="line">    q.enQueue(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.Front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.deQueue();</span><br><span class="line">    <span class="keyword">if</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.Front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.deQueue();</span><br><span class="line">    <span class="keyword">if</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.Front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h3><p>通过上面的简单队列的实现，我们可以发现有些时候，随着起始指针的移动，浪费了越来越多的空间。 当我们有空间限制时，这将是难以接受的。</p><p><img src="/2019/08/12/leetcodestudy1/2.png"></p><p>让我们考虑一种情况，即我们只能分配一个最大长度为 5 的数组。当我们只添加少于 5 个元素时，我们的解决方案很有效。 例如，如果我们只调用入队函数四次后还想要将元素 10 入队，那么我们可以成功。</p><p>但是我们不能接受更多的入队请求，这是合理的，因为现在队列已经满了。但是如果我们将一个元素出队呢？</p><p><img src="/2019/08/12/leetcodestudy1/3.png"></p><p>实际上，当我们将队头的元素进行删除之后，按理说这部分空间已经空余，我们完全可以再接受一个新的元素，但是普通的队列并不支持这种操作，因此我们需要循环队列。</p><hr><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><p>此前，我们提供了一种简单但低效的队列实现。</p><p>更有效的方法是使用循环队列。 具体来说，我们可以使用<strong>固定大小的数组</strong>和<strong>两个指针</strong>来指示起始位置和结束位置。 目的是重用我们之前提到的被浪费的存储。</p><p>我们通过一系列简单的操作，来模拟一下循环队列的原理：</p><p><img src="/2019/08/12/leetcodestudy1/4-1.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-2.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-3.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-4.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-5.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-6.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-7.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-8.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-9.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-10.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-11.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-12.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-13.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-14.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-15.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-16.png" width="300"></p><p><img src="/2019/08/12/leetcodestudy1/4-17.png" width="300"></p><h3 id="循环队列-实现"><a href="#循环队列-实现" class="headerlink" title="循环队列-实现"></a>循环队列-实现</h3><p>在循环队列中，我们使用一个<code>数组</code>和两个指针（<code>head</code> 和 <code>tail</code>）。 <code>head</code> 表示队列的起始位置，<code>tail</code> 表示队列的结束位置。</p><p><strong>Java版：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircularQueue</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. Set the size of the queue to be k. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCircularQueue</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        head = -<span class="number">1</span>;</span><br><span class="line">        tail = -<span class="number">1</span>;</span><br><span class="line">        size = k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Insert an element into the circular queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            head = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % size;</span><br><span class="line">        data[tail] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Delete an element from the circular queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">            head = -<span class="number">1</span>;</span><br><span class="line">            tail = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = (head + <span class="number">1</span>) % size;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[head];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the last item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Rear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[tail];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Checks whether the circular queue is empty or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Checks whether the circular queue is full or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((tail + <span class="number">1</span>) % size) == head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularQueue obj = new MyCircularQueue(k);</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.enQueue(value);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.deQueue();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.Front();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.Rear();</span></span><br><span class="line"><span class="comment"> * boolean param_5 = obj.isEmpty();</span></span><br><span class="line"><span class="comment"> * boolean param_6 = obj.isFull();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>C++版：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircularQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. Set the size of the queue to be k. */</span></span><br><span class="line">    MyCircularQueue(<span class="keyword">int</span> k) &#123;</span><br><span class="line">        data.resize(k);</span><br><span class="line">        head = <span class="number">-1</span>;</span><br><span class="line">        tail = <span class="number">-1</span>;</span><br><span class="line">        size = k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Insert an element into the circular queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            head = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % size;</span><br><span class="line">        data[tail] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Delete an element from the circular queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">            head = <span class="number">-1</span>;</span><br><span class="line">            tail = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = (head + <span class="number">1</span>) % size;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[head];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the last item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Rear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[tail];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Checks whether the circular queue is empty or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head == <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Checks whether the circular queue is full or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((tail + <span class="number">1</span>) % size) == head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularQueue obj = new MyCircularQueue(k);</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj.enQueue(value);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj.deQueue();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.Front();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.Rear();</span></span><br><span class="line"><span class="comment"> * bool param_5 = obj.isEmpty();</span></span><br><span class="line"><span class="comment"> * bool param_6 = obj.isFull();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="队列-用法"><a href="#队列-用法" class="headerlink" title="队列 - 用法"></a>队列 - 用法</h2><p>大多数流行语言都提供内置的队列库，因此只需要直接调用即可。</p><p>如前所述，队列有两个重要的操作，<strong>入队 enqueue</strong> 和<strong>出队 dequeue</strong>。 此外，我们应该能够获得队列中的第一个元素，因为应该首先处理它。</p><p>下面是使用内置队列库及其常见操作的一些示例：</p><p><strong>Java版：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "static void main" must be defined in a public class.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. Initialize a queue.</span></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="comment">// 2. Get the first element - return null if queue is empty.</span></span><br><span class="line">        System.out.println(<span class="string">"The first element is: "</span> + q.peek());</span><br><span class="line">        <span class="comment">// 3. Push new element.</span></span><br><span class="line">        q.offer(<span class="number">5</span>);</span><br><span class="line">        q.offer(<span class="number">13</span>);</span><br><span class="line">        q.offer(<span class="number">8</span>);</span><br><span class="line">        q.offer(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 4. Pop an element.</span></span><br><span class="line">        q.poll();</span><br><span class="line">        <span class="comment">// 5. Get the first element.</span></span><br><span class="line">        System.out.println(<span class="string">"The first element is: "</span> + q.peek());</span><br><span class="line">        <span class="comment">// 7. Get the size of the queue.</span></span><br><span class="line">        System.out.println(<span class="string">"The size is: "</span> + q.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++版：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Initialize a queue.</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="comment">// 2. Push new element.</span></span><br><span class="line">    q.push(<span class="number">5</span>);</span><br><span class="line">    q.push(<span class="number">13</span>);</span><br><span class="line">    q.push(<span class="number">8</span>);</span><br><span class="line">    q.push(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 3. Check if queue is empty.</span></span><br><span class="line">    <span class="keyword">if</span> (q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Queue is empty!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. Pop an element.</span></span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="comment">// 5. Get the first element.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The first element is: "</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 6. Get the last element.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The last element is: "</span> &lt;&lt; q.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 7. Get the size of the queue.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The size is: "</span> &lt;&lt; q.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列-BFS"><a href="#队列-BFS" class="headerlink" title="队列-BFS"></a>队列-BFS</h2><p>广度优先搜索（BFS）又称宽度优先搜索，一般用来解决最短路径问题。广搜的目标是，一旦找到一条从起点到目标结点的路径，这条路径就一定是最优的(步数最少)的。<br>广搜是按怎样顺序来搜索的呢？我们通过以下一棵树来进行示范。</p><p><img src="/2019/08/12/leetcodestudy1/5.jpeg"></p><p>我们要想广度优先，那么首先搜索第一层<strong>1</strong>,然后搜索第二层，从左向右<strong>2,5,6,9</strong>，在搜索第三层，从左向右<strong>3,4,7,10</strong>，再搜索第四层<strong>8</strong>，很简单吧，这就是一个层次遍历。</p><p>对于BFS程序的实现需要借助<strong>队列</strong>：</p><p>(1)首先，令树根1入队</p><p>(2)队头元素出队，输出1，同时令1的所有孩子(从左向右顺序)入队</p><p>(3)队头元素出队，输出2，同时令2的所有孩子(从左向右顺序)入队</p><p>(4)队头元素出队，输出5，同时令5的所有孩子(从左向右顺序)入队，5没有孩子，不操作</p><p>(5)队头元素出队，输出6，同时令6的所有孩子(从左向右顺序)入队</p><p>(6)队头元素出队，输出9，同时令9的所有孩子(从左向右顺序)入队</p><p>(7)队头元素出队，输出3，同时令3的所有孩子(从左向右顺序)入队，3没有孩子，不操作</p><p>(8)队头元素出队，输出4，同时令4的所有孩子(从左向右顺序)入队，4没有孩子，不操作</p><p>(9)队头元素出队，输出7，同时令7的所有孩子(从左向右顺序)入队</p><p>(10)队头元素出队，输出10，同时令10的所有孩子(从左向右顺序)入队，10没有孩子，不操作</p><p>(11)队头元素出队，输出8，同时令8的所有孩子(从左向右顺序)入队，8没有孩子，不操作</p><p><strong>队列的情况如下所示：</strong></p><table><thead><tr><th><strong>（1）</strong></th><th><strong>1</strong></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>（2）</strong></td><td><strong>2</strong></td><td><strong>5</strong></td><td><strong>6</strong></td><td><strong>9</strong></td><td></td></tr><tr><td><strong>（3）</strong></td><td><strong>5</strong></td><td><strong>6</strong></td><td><strong>9</strong></td><td><strong>3</strong></td><td><strong>4</strong></td></tr><tr><td><strong>（4）</strong></td><td><strong>6</strong></td><td><strong>9</strong></td><td><strong>3</strong></td><td><strong>4</strong></td><td></td></tr><tr><td><strong>（5）</strong></td><td><strong>9</strong></td><td><strong>3</strong></td><td><strong>4</strong></td><td><strong>7</strong></td><td></td></tr><tr><td><strong>（6）</strong></td><td><strong>3</strong></td><td><strong>4</strong></td><td><strong>7</strong></td><td><strong>10</strong></td><td></td></tr><tr><td><strong>（7）</strong></td><td><strong>4</strong></td><td><strong>7</strong></td><td><strong>10</strong></td><td></td><td></td></tr><tr><td><strong>（8）</strong></td><td><strong>7</strong></td><td><strong>10</strong></td><td></td><td></td><td></td></tr><tr><td><strong>（9）</strong></td><td><strong>10</strong></td><td><strong>8</strong></td><td></td><td></td><td></td></tr><tr><td><strong>（10）</strong></td><td><strong>8</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>（11）</strong></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>此时队列为空，结束。输出顺序为<strong>1、2、5、6、9、3、4、7、10、8</strong>，该顺序即是BFS搜索的顺序，全图遍历。如果找最优解，搜索过程中找到便结束。</p><h3 id="结点的处理顺序"><a href="#结点的处理顺序" class="headerlink" title="结点的处理顺序"></a>结点的处理顺序</h3><p>在第一轮中，我们处理根结点。在第二轮中，我们处理根结点旁边的结点；在第三轮中，我们处理距根结点两步的结点；等等等等。</p><p>与树的层序遍历类似，<strong>越是接近根结点的结点将越早地遍历。</strong></p><p>如果在<strong>第 k 轮</strong>中将结点 X 添加到队列中，则根结点与 X 之间的<strong>最短路径的长度恰好是 k</strong>。也就是说，第一次找到目标结点时，你已经处于最短路径中。</p><h3 id="队列的入队和出队顺序"><a href="#队列的入队和出队顺序" class="headerlink" title="队列的入队和出队顺序"></a>队列的入队和出队顺序</h3><p>我们首先将根结点排入队列。然后在每一轮中，我们逐个处理已经在队列中的结点，并将所有邻居添加到队列中。值得注意的是，新添加的节点不会立即遍历，而是在下一轮中处理。</p><p>结点的处理顺序与它们添加到队列的顺序是完全相同的顺序，即先进先出（FIFO）。这就是我们在 BFS 中使用队列的原因。</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>有时，确保我们永远不会访问一个结点两次很重要。否则，我们可能陷入无限循环。因此，我们可以通过添加一个哈希集来解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the length of the shortest path between root and target node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node root, Node target)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; queue;  <span class="comment">// store all nodes which are waiting to be processed</span></span><br><span class="line">    Set&lt;Node&gt; used;     <span class="comment">// store all the used nodes</span></span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;       <span class="comment">// number of steps neeeded from root to current node</span></span><br><span class="line">    <span class="comment">// initialize</span></span><br><span class="line">    add root to queue;</span><br><span class="line">    add root to used;</span><br><span class="line">    <span class="comment">// BFS</span></span><br><span class="line">    <span class="keyword">while</span> (queue is not empty) &#123;</span><br><span class="line">        step = step + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// iterate the nodes which are already in the queue</span></span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            Node cur = the first node in queue;</span><br><span class="line">            <span class="keyword">return</span> step <span class="keyword">if</span> cur is target;</span><br><span class="line">            <span class="keyword">for</span> (Node next : the neighbors of cur) &#123;</span><br><span class="line">                <span class="keyword">if</span> (next is not in used) &#123;</span><br><span class="line">                    add next to queue;</span><br><span class="line">                    add next to used;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            remove the first node from queue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;          <span class="comment">// there is no path from root to target</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有两种情况你不需要使用哈希集：</strong></p><ol><li>你完全确定没有循环，例如，在树遍历中；</li><li>你确实希望多次将结点添加到队列中。</li></ol><hr><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><img src="/2019/08/12/leetcodestudy1/6.png"></p><p>与队列不同，栈是一个 LIFO 数据结构。在 LIFO 数据结构中，将首先处理添加到队列中的最新元素。</p><p>通常，插入操作在栈中被称作入栈 push 。与队列类似，总是在堆栈的末尾添加一个新元素。但是，删除操作，退栈 pop ，将始终删除队列中相对于它的最后一个元素。</p><h3 id="栈-实现"><a href="#栈-实现" class="headerlink" title="栈-实现"></a>栈-实现</h3><p>栈的实现比队列容易。<code>动态数组</code>足以实现堆栈结构。</p><p><strong>Java版：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "static void main" must be defined in a public class.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; data;               <span class="comment">// store elements</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Insert an element into the stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        data.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Checks whether the queue is empty or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Get the top item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.get(data.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Delete an element from the queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data.remove(data.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyStack s = <span class="keyword">new</span> MyStack();</span><br><span class="line">        s.push(<span class="number">1</span>);</span><br><span class="line">        s.push(<span class="number">2</span>);</span><br><span class="line">        s.push(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!s.isEmpty()) &#123;</span><br><span class="line">                System.out.println(s.top());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(s.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++版：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;               <span class="comment">// store elements</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">/** Insert an element into the stack. */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            data.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** Checks whether the queue is empty or not. */</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** Get the top item from the queue. */</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data.back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** Delete an element from the queue. Return true if the operation is successful. */</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            data.pop_back();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyStack s;</span><br><span class="line">    s.push(<span class="number">1</span>);</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!s.isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (s.pop() ? <span class="string">"true"</span> : <span class="string">"false"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈-用法"><a href="#栈-用法" class="headerlink" title="栈-用法"></a>栈-用法</h3><p>大多数流行的语言都提供了内置的栈库。除了初始化，我们还需要知道如何使用两个最重要的操作：入栈和退栈。除此之外，你应该能够从栈中获得顶部元素。</p><p><strong>java版</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "static void main" must be defined in a public class.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. Initialize a stack.</span></span><br><span class="line">        Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 2. Push new element.</span></span><br><span class="line">        s.push(<span class="number">5</span>);</span><br><span class="line">        s.push(<span class="number">13</span>);</span><br><span class="line">        s.push(<span class="number">8</span>);</span><br><span class="line">        s.push(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 3. Check if stack is empty.</span></span><br><span class="line">        <span class="keyword">if</span> (s.empty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Stack is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. Pop an element.</span></span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="comment">// 5. Get the top element.</span></span><br><span class="line">        System.out.println(<span class="string">"The top element is: "</span> + s.peek());</span><br><span class="line">        <span class="comment">// 6. Get the size of the stack.</span></span><br><span class="line">        System.out.println(<span class="string">"The size is: "</span> + s.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++版</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Initialize a stack.</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="comment">// 2. Push new element.</span></span><br><span class="line">    s.push(<span class="number">5</span>);</span><br><span class="line">    s.push(<span class="number">13</span>);</span><br><span class="line">    s.push(<span class="number">8</span>);</span><br><span class="line">    s.push(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 3. Check if stack is empty.</span></span><br><span class="line">    <span class="keyword">if</span> (s.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Stack is empty!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. Pop an element.</span></span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="comment">// 5. Get the top element.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The top element is: "</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 6. Get the size of the stack.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The size is: "</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈-DFS"><a href="#栈-DFS" class="headerlink" title="栈-DFS"></a>栈-DFS</h2><p>与 BFS 类似，深度优先搜索（DFS）也可用于查找从根结点到目标结点的路径。</p><p><img src="/2019/08/12/leetcodestudy1/7.png"></p><h3 id="节点的处理顺序"><a href="#节点的处理顺序" class="headerlink" title="节点的处理顺序"></a>节点的处理顺序</h3><p>在上面的例子中，我们从根结点 A 开始。首先，我们选择结点 B 的路径，并进行回溯，直到我们到达结点 E，我们无法更进一步深入。然后我们回溯到 A 并选择第二条路径到结点 C 。从 C 开始，我们尝试第一条路径到 E 但是 E 已被访问过。所以我们回到 C 并尝试从另一条路径到 F。最后，我们找到了 G。</p><p>总的来说，在我们到达<strong>最深的</strong>结点之后，我们只会回溯并尝试另一条路径。</p><p>因此，你在 DFS 中找到的第一条路径<strong>并不总是最短的路径</strong>。例如，在上面的例子中，我们成功找出了路径 A-&gt; C-&gt; F-&gt; G 并停止了 DFS。但这不是从 A 到 G 的最短路径。</p><h3 id="栈的入栈和退栈顺序"><a href="#栈的入栈和退栈顺序" class="headerlink" title="栈的入栈和退栈顺序"></a>栈的入栈和退栈顺序</h3><p>我们首先将根结点推入到栈中；然后我们尝试第一个邻居 B 并将结点 B 推入到栈中；等等等等。当我们到达最深的结点 E 时，我们需要回溯。当我们回溯时，我们将从栈中弹出最深的结点，这实际上是推入到栈中的最后一个结点。</p><p>结点的处理顺序是完全相反的顺序，就像它们被添加到栈中一样，它是<strong>后进先出（LIFO）</strong>。这就是我们在 DFS 中使用栈的原因。</p><h3 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h3><p><strong>递归</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Return true if there is a path from cur to target.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">DFS</span><span class="params">(Node cur, Node target, Set&lt;Node&gt; visited)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span> <span class="keyword">if</span> cur is target;</span><br><span class="line">    <span class="keyword">for</span> (next : each neighbor of cur) &#123;</span><br><span class="line">        <span class="keyword">if</span> (next is not in visited) &#123;</span><br><span class="line">            add next to visted;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">true</span> <span class="keyword">if</span> <span class="title">DFS</span><span class="params">(next, target, visited)</span> </span>== <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>显式栈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Return true if there is a path from cur to target.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    Set&lt;Node&gt; visited;</span><br><span class="line">    Stack&lt;Node&gt; s;</span><br><span class="line">    add root to s;</span><br><span class="line">    <span class="keyword">while</span> (s is not empty) &#123;</span><br><span class="line">        Node cur = the top element in s;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span> <span class="keyword">if</span> cur is target;</span><br><span class="line">        <span class="keyword">for</span> (Node next : the neighbors of cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next is not in visited) &#123;</span><br><span class="line">                add next to s;</span><br><span class="line">                add next to visited;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        remove cur from s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例:</strong></p><p><img src="/2019/08/12/leetcodestudy1/9.png"></p><p>让我们看一个例子。我们希望在下图中找到结点 0 和结点 3 之间的路径。我们还会在每次调用期间显示栈的状态。</p><p>在每个堆栈元素中，都有一个整数 <strong>cur</strong>，一个整数 <strong>target</strong>，一个对<strong>访问过的</strong>数组的引用和一个对数组<strong>边界</strong>的引用，这些正是我们在 DFS 函数中的参数。我们只在上面的栈中显示 cur。</p><p>每个元素都需要固定的空间。栈的大小正好是 DFS 的深度。因此，在最坏的情况下，维护系统栈需要 O(h)，其中 h 是 DFS 的最大深度。在计算空间复杂度时，永远不要忘记考虑系统栈。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>力扣：</p><p><a href="https://leetcode-cn.com/explore/learn/card/queue-stack/218/stack-last-in-first-out-data-structure/876/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/learn/card/queue-stack/218/stack-last-in-first-out-data-structure/876/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小白的LeetCode探索之路：队列-amp-栈&quot;&gt;&lt;a href=&quot;#小白的LeetCode探索之路：队列-amp-栈&quot; class=&quot;headerlink&quot; title=&quot;小白的LeetCode探索之路：队列&amp;amp;栈&quot;&gt;&lt;/a&gt;小白的LeetCode探索之路：队列&amp;amp;栈&lt;/h1&gt;&lt;p&gt;鉴于暑期被实验室发配帝都实习两个月，在公司摸鱼的时候感到自己明年就要准备面试，于是乎准备刷LeetCode。但是鉴于本身算法基础不是很扎实，所以打算先对一些基础的数据结构进行一些复习。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://www.amorness.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="队列&amp;栈" scheme="https://www.amorness.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97-%E6%A0%88/"/>
    
    
      <category term="数据结构" scheme="https://www.amorness.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="队列" scheme="https://www.amorness.com/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="栈" scheme="https://www.amorness.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之特征工程</title>
    <link href="https://www.amorness.com/2019/04/04/feature/"/>
    <id>https://www.amorness.com/2019/04/04/feature/</id>
    <published>2019-04-04T02:08:42.000Z</published>
    <updated>2019-04-04T02:41:50.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习之特征工程"><a href="#机器学习之特征工程" class="headerlink" title="机器学习之特征工程"></a>机器学习之特征工程</h1><p>坊间常说：“<strong>数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已</strong>”。由此可见，特征工程在机器学习中占有相当重要的地位。在实际应用当中，可以说特征工程是机器学习成功的关键。在实际应用当中，可以说特征工程是机器学习成功的关键。纵观Kaggle、KDD等国内外大大小小的比赛，每个竞赛的冠军其实并没有用到很高深的算法，大多数都是在特征工程这个环节做出了出色的工作，然后使用一些常见的算法，比如LR，就能得到出色的性能。遗憾的是，在很多的书籍中并没有直接提到特征工程，更多的是<strong>特征选择</strong>。</p><a id="more"></a><p>本文主要通过以下三个问题出发来理解特征工程：</p><ul><li>特征工程是什么？</li><li>为什么要做特征工程？</li><li>应该如何做特征工程？ </li></ul><hr><h2 id="特征工程是什么？"><a href="#特征工程是什么？" class="headerlink" title="特征工程是什么？"></a>特征工程是什么？</h2><p>当你想要你的预测模型性能达到最佳时，你要做的不仅是要选取最好的算法，还要尽可能的从原始数据中获取更多的信息。那么问题来了，你应该如何为你的预测模型得到更好的数据呢？</p><p>想必到了这里你也应该猜到了，是的，这就是特征工程要做的事，它的目的就是<strong>获取更好的训练数据。</strong></p><p>那么，到底什么是特征工程？我们知道，数据是信息的载体，但是原始的数据包含了大量的噪声，信息的表达也不够简练。<strong>特征工程是利用数据领域的相关知识来创建能够使机器学习算法达到最佳性能的特征的过程</strong>。使用特征表示的信息，信息损失较少，原始数据中包含的规律依然保留。此外，特征还需要尽量减少原始数据中的不确定因素（白噪声、异常数据、数据缺失…等等）的影响。</p><hr><p>下面是前人总结的关于特征工程的思维导图：</p><p><img src="/2019/04/04/feature/特征工程思维导图.jpg" alt="Features"></p><hr><h2 id="特征工程的重要性"><a href="#特征工程的重要性" class="headerlink" title="特征工程的重要性"></a>特征工程的重要性</h2><p>为什么在实际工作中都要有特征工程这个过程，下面不同的角度来分析一下。</p><p>首先，我们大家都知道，数据特征的选择会直接影响我们模型的预测性能。你可以这么说：“选择的特征越好，最终得到的性能也就越好”。这句话说得没错，但也会给我们造成误解。事实上，你得到的实验结果取决于你<strong>选择的模型</strong>、<strong>获取的数据</strong>以及<strong>使用的特征</strong>，甚至你问题的形式和你用来评估精度的客观方法也扮演了一部分。此外，你的实验结果还受到许多相互依赖的属性的影响，你需要的是能够很好地描述你数据内部结构的好特征。</p><p><strong>（1）特征越好，灵活性越强</strong></p><p>只要特征选得好，即使是一般的模型（或算法）也能获得很好的性能，因为大多数模型（或算法）在好的数据特征下表现的性能都还不错。好特征的灵活性在于它允许你选择不复杂的模型，同时运行速度也更快，也更容易理解和维护。</p><p><strong>（2）特征越好，构建的模型越简单</strong></p><p>有了好的特征，即便你的参数不是最优的，你的模型性能也能仍然会表现的很nice，所以你就不需要花太多的时间去寻找最有参数，这大大的降低了模型的复杂度，使模型趋于简单。</p><p><strong>（3）特征越好，模型的性能越出色</strong></p><p>显然，这一点是毫无争议的，我们进行特征工程的最终目的就是提升模型的性能。</p><hr><h2 id="特征工程三个子问题"><a href="#特征工程三个子问题" class="headerlink" title="特征工程三个子问题"></a>特征工程三个子问题</h2><h3 id="特征构建"><a href="#特征构建" class="headerlink" title="特征构建"></a>特征构建</h3><p> 特征构建是指从原始数据中人工的找出一些具有物理意义的特征。需要花时间去观察原始数据，思考问题的潜在形式和数据结构，对数据敏感性和机器学习实战经验能帮助特征构建。除此之外，<strong>属性分割</strong>和<strong>结合</strong>是特征构建时常使用的方法。</p><p>下面我们结合具体场景做一些简单介绍：</p><h4 id="时间戳处理"><a href="#时间戳处理" class="headerlink" title="时间戳处理"></a>时间戳处理</h4><p>时间戳属性通常需要分离成多个维度比如年、月、日、小时、分钟、秒钟。通常时间序列数据会含有一定的趋势和周期性，这时需要我们去<strong>构建趋势因子和周期因子</strong>。</p><h4 id="分解类别属性"><a href="#分解类别属性" class="headerlink" title="分解类别属性"></a>分解类别属性</h4><p><strong>一些属性是类别型而不是数值型</strong>，举一个简单的例子，由{红，绿、蓝}组成的颜色属性，最常用的方式是把每个类别属性转换成二元属性，即从{0,1}取一个值。因此基本上<strong>增加的属性等于相应数目的类别</strong>，并且对于你数据集中的每个实例，只有一个是1（其他的为0），这也就是<strong>独热（one-hot)编码方式</strong>。当然这个方法并不是唯一的。</p><h4 id="分箱和分区"><a href="#分箱和分区" class="headerlink" title="分箱和分区"></a>分箱和分区</h4><p>有时候，<strong>将数值型属性转换成类别呈现</strong>更有意义，同时能使算法减少噪声的干扰，通过<strong>将一定范围内的数值划分成确定的块。</strong>举个例子，我们预测一个人是否拥有某款衣服，这里年龄是一个确切的因子。其实年龄组是更为相关的因子，所以我们可以将年龄分布划分成1-10,11-18,19-25,26-40等年龄段，分别表示 幼儿，青少年，青年，中年四个年龄组，让相近的年龄组表现出相似的属性。此外，我们还可以<strong>对分箱，分区做一些统计量字段作为数据的特征。</strong></p><p>只有在了解属性的领域知识的基础，确定属性能够划分成简洁的范围时分区才有意义。即<strong>所有的数值落入一个分区时能够呈现出共同的特征。</strong>在实际应用中，当你不想让你的模型总是尝试区分值之间是否太近时，分区能够避免出现过拟合。例如，如果你所感兴趣的是将一个城市作为整体，这时你可以将所有落入该城市的维度值进行整合成一个整体。分箱也能减小小错误的影响，通过将一个给定值划入到最近的块中。<strong>如果划分范围的数量和所有可能值相近，或对你来说准确率很重要的话，此时分箱就不适合了。</strong></p><h4 id="交叉特征"><a href="#交叉特征" class="headerlink" title="交叉特征"></a>交叉特征</h4><p>交叉特征是特征工程中重要的方法之一，交叉特征是一种很独特的方式，它<strong>将两个或更多的类别属性组合成一个。</strong>当组合的特征要比单个特征更好时，这是一项非常有用的技术。数学上来说，是<strong>对类别特征的所有可能值进行交叉相乘。</strong>当然我们不仅仅会去查找交叉项关系，还可以去寻找更加复杂的二次项，三次项乃至更复杂的关系，这根据问题求解的需要决定。</p><p><strong>经度与纬度的组合便是交叉特征的应用实例，</strong>一个相同的经度对应了地图上很多的地方，纬度也是一样。但是一旦你将经度和纬度组合到一起，它们就代表了地理上特定的一块区域，区域中每一部分是拥有着类似的特性</p><hr><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>原始数据常常是高维的，其中包含了许多冗余信息或者十分稀疏或者计算量大，拿原始数据来训练是可行的，<strong>但是往往直接训练是低效的</strong>。所以特征提取往往是必要的。</p><p>特征提取主要是为了解决下面三个问题：</p><p>（1）原始数据特征中的<strong>强相关性造成的冗余信息</strong>。（2）原始数据<strong>十分稀疏</strong>。（3）原始数据<strong>维度巨大</strong>。</p><p>特征提取的对象是原始数据（raw data），它的目的是<strong>自动地构建新的特征，将原始特征转换为一组具有明显物理意义（Gabor、几何特征[角点、不变量]、纹理[LBP HOG]）或者统计意义或核的特征</strong>。比如通过变换特征取值来减少原始数据中某个特征的取值个数等。对于表格数据，你可以在你设计的特征矩阵上使用主要成分分析来进行特征提取从而创建新的特征。对于图像数据，可能还包括了线或边缘检测。</p><p>常见的一些特征提取的方法：</p><ul><li><strong>PCA主成分分析</strong></li><li><strong>LDA线性判别分析</strong></li><li><strong>ICA独立成分分析</strong></li></ul><hr><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><p>特征选择目的是<strong>从特征集合中挑选一组最具统计意义的特征子集，从而达到降维的效果</strong>。特征选择是剔除不相关或者冗余的特征，减少有效特征的个数，减少模型训练的时间，提高模型的精确度。特征提取通过特征转换实现降维，特征选择则是依靠统计学方法或者于机器学习模型本身的特征选择（排序）功能实现降维。特征选择是个重复迭代的过程，有时可能自己认为特征选择做的很好，但实际中模型训练并不太好，所以每次特征选择都要使用模型去验证，最终目的是为了获得能训练出好的模型的数据，提升模型的性能。</p><p>特征选择过程一般包括<strong>产生过程，评价函数，停止准则，验证过程，</strong>这4个部分。如下图所示：</p><p><img src="/2019/04/04/feature/特征选择.png" alt="process"></p><p>(1) <strong>产生过程( Generation Procedure )</strong>：产生过程是搜索特征子集的过程，负责为评价函数提供特征子集。<br>(2) <strong>评价函数( Evaluation Function )</strong>：评价函数是评价一个特征子集好坏程度的一个准则。<br>(3) <strong>停止准则( Stopping Criterion )</strong>：停止准则是与评价函数相关的，一般是一个阈值，当评价函数值达到这个阈值后就可停止搜索。<br>(4) <strong>验证过程( Validation Procedure )</strong> ：在验证数据集上验证选出来的特征子集的有效性。</p><hr><p>通常来说，从两个方面考虑来选择特征：</p><ul><li>特征是否发散：如果一个特征不发散，例如方差接近于0，也就是说样本在这个特征上基本上没有差异，这个特征对于样本的区分并没有什么用。</li><li>特征与目标的相关性：这点比较显见，与目标相关性高的特征，应当优选选择。</li></ul><p>根据特征选择的形式又可以将特征选择方法分为3种：</p><ul><li>Filter：过滤法，侧重于单个特征，按照发散性或者相关性对各个特征进行评分，设定阈值或者待选择阈值的个数，选择特征。</li><li>Wrapper：包装法，侧重于特征子集，根据目标函数（通常是预测效果评分），每次选择若干特征，或者排除若干特征。</li><li>Embedded：嵌入法，先使用某些机器学习的算法和模型进行训练，得到各个特征的权值系数，根据系数从大到小选择特征。类似于Filter方法，但是是通过训练来确定特征的优劣。</li></ul><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>过滤法一般使用<strong>评价准则</strong>来选择特征，从训练数据中选择全部特征向量空间，并在此空间内进行过滤、搜索，得到在阈值范围内的特征，确定最后的特征子集，放入机器学习算法中进行建模。</p><p>评价标准函数分为四类：<strong>距离度量、信息度量、依赖性度量和一致性度量</strong>。与特定的学习算法无关，所以具有良好的通用性。常用的评价标准有：方差、相关系数、卡方检验、互信息和最大信息系数。</p><p>①<strong>方差</strong></p><p> 方差即衡量随机变量和其数学期望之间的偏离程度，其公式如下：<br>$$<br>σ^2=∑\frac{(X−μ)^2}{N}<br>$$<br>其中$\sigma^2$为总样本方差，$X$为变量，$\mu$为总样本均值，$N$为总样本数量</p><p>在特征选择中，可以默认去除方差没有达到定制标准的特征。因为如果方差很小，证明此维特征的差异性很小，则对最后结果的区分性也不是很大。</p><p>②<strong>相关系数</strong></p><p>Pearson相关系数衡量<strong>线性相关</strong>、Spearman相关系数衡量<strong>曲线相关</strong>、Kendall相关系数衡量两个变量<strong>观测排序的一致性</strong>。对于相关和不相关，在阈值设定上是有非常大的主观性的。<br><strong>Pearson相关系数</strong>的值介于-1到1之间，1 表示变量完全正相关，0 表示无关，-1 表示完全负相关。计算公式：<br>$$<br>r = \frac{1}{n-1}\sum_{i=1}^{n}{(\frac{X_i-\bar{X}}{S_X})(\frac{Y_i-\bar{Y}}{S_Y})}<br>$$<br>其中$\bar{X},\bar{Y}$为样本$X,Y$的平均值，$S_X,S_Y$为样本$X,Y$的标准差</p><p>注意：皮尔逊相关系数只对线性的特征敏感，如果关系是非线性的，即便是两个变量有很强的一一对应关系，pearson相关系数也有可能接近0。这种情况用<strong>spearman秩相关系数</strong>则能很好的表示出这种非线性的相关性。</p><p>③<strong>卡方检验</strong></p><p>卡方检验是检<strong>验定性自变量</strong>和<strong>定性因变量</strong>的相关性。在检验时，先做一个假设，假设两个变量是独立的；然后根据此假设计算独立时应该的理论值；计算实际值与理论值之间的差异，从而推翻假设或者服从假设。当应用在特征选择中，不关心具体的值，所以也就不存在推翻不推翻原假设，只关心大小，然后排序。<br>$$<br>\chi^2 = \sum\frac{(A-E)^2}{E}<br>$$<br>④<strong>互信息和最大信息系数</strong></p><p>互信息表示随机变量中包含另个一随机变量的信息量，例如两个随机变量（X,Y），互信息是联合分布与乘积分布的相对熵：<br>$$<br>I(X，Y)=\sum p(x,y)\log(\frac{p(x,y)}{p(x)p(y)})<br>$$</p><h4 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h4><p>此类方法是以分类器的<strong>目标函数</strong>，即利用学习算法的性能来评价特征子集的优劣。其实可以理解为以最终模型结果驱动来选择特征子集，这里也用到了在搜索中的分类方法，通过不同的搜索方法，选择若干候选特征子集，放入模型进行实验，多次实验选择使得模型得到较优结果的特征集合作为最终的特征子集。所以，对于一个待评价的特征子集，这种方法需要训练一个分类器，<strong>根据分类器的性能对该特征子集进行评价</strong>，从而进行特征选择和特征排除，最终选择特征子集，然后使用此分类器和特征子集进行建模。</p><p>Wrapper方法比Filter方法慢，但是此类方法得到的特征子集性能通常更好，但是通用性不强，改变学习算法时，需要针对特定的学习算法按照相应的指标重新选择特征子集，而且要重新训练和测试，所以对于这类方法通常计算复杂度挺高。其实每选择一次特征子集，就相当于进行了从头到尾的一次实验过程，个人认为这种是结果驱动的选择，换了训练的数据集都可能导致之前选择的特征子集失效。</p><h4 id="Embedded"><a href="#Embedded" class="headerlink" title="Embedded"></a>Embedded</h4><p><strong>特征选择本身是作为学习算法的一部分，是一种集成的方法，先使用某种学习算法进行训练，然后得到各个特征的权值系数，根据系数的大小对特征进行选择</strong>。类似于Filter方法，但是要经过模型训练才能得到相应的特征权重值。例如<strong>决策树</strong>算法（ID3、C4.5、C5、CART）使用了信息增益、信息增益比、Gini系数等指标，在每一层树增长的过程中，都需要进行特征选择。<strong>线性回归算法</strong>中，通过训练得到每个特征值的权重，可以根据权重选择特征，重新训练。<strong>L1范数</strong>正则化，通过在成本或者损失函数中添加L1范数，是的学习的结果满足稀疏化，从而得到适合的特征。这里要注意的是加入L1范数的惩罚项后，没有选择的特征并不是代表不重要，所以一般<strong>结合L2范数</strong>来优化处理。若一个特征在L1中的权值为1，选择在L2中权值差别不大且在L1中权值为0的特征构成同类集合，将这一集合中的特征平分L1中的权值，故需要构建一个新的逻辑回归模型。</p><p>在求解的过程中，我们往往要在平方误差项与正则化项之间折中，找出在平方误差等值线和正则化项等值线相交处。从下图中可以看出，采用L1范数的时候，与平方误差等值线的相交处经常出现在坐标轴上，也就是说得到的一些权重值(ω)为0，所以，使用L1范数的时候，我们能得到更稀疏的解[9]。Tibshirani在1996年提出的LASSO(Least Absolute Shrinkage and Selection Operator)回归就是使用L1范数。</p><p><img src="/2019/04/04/feature/正则.jpg" width="300"></p><p>局部加权回归模型（LOESS），对于区域样本使用多项式回归（Cleveland W1988）。这类局部回归有极强的适应性，可以有效得到平滑的回归趋势。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a><strong>Conclusion</strong></h2><p>绕了这么多，下面对几个专用名字做一个总结：</p><ul><li>特征工程：利用数据领域的相关知识来创建能够使机器学习算法达到最佳性能的特征的过程。</li><li>特征构建：是原始数据中人工的构建新的特征。</li><li>特征提取：自动地构建新的特征，将原始特征转换为一组具有明显物理意义或者统计意义或核的特征。</li><li>特征选择：从特征集合中挑选一组最具统计意义的特征子集，从而达到降维的效果</li></ul><p>特征工程是一个超集，它包括特征提取、特征构建和特征选择这三个子模块。在实践当中，每一个子模块都非常重要，忽略不得。根据经验，可以将这三个子模块的重要性进行了一个排名，即：特征构建&gt;特征提取&gt;特征选择。</p><p>事实上，真的是这样，<strong>如果特征构建做的不好，那么它会直接影响特征提取，进而影响了特征选择，最终影响模型的性能</strong>。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>机器学习之特征工程 <a href="https://www.cnblogs.com/wxquare/p/5484636.html" target="_blank" rel="noopener">https://www.cnblogs.com/wxquare/p/5484636.html</a></p><p>细说特征工程  <a href="https://blog.csdn.net/m0_38024592/article/details/80836217" target="_blank" rel="noopener">https://blog.csdn.net/m0_38024592/article/details/80836217</a></p><p>特征工程的概述 <a href="https://www.cnblogs.com/datasnail/p/9617480.html" target="_blank" rel="noopener">https://www.cnblogs.com/datasnail/p/9617480.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;机器学习之特征工程&quot;&gt;&lt;a href=&quot;#机器学习之特征工程&quot; class=&quot;headerlink&quot; title=&quot;机器学习之特征工程&quot;&gt;&lt;/a&gt;机器学习之特征工程&lt;/h1&gt;&lt;p&gt;坊间常说：“&lt;strong&gt;数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已&lt;/strong&gt;”。由此可见，特征工程在机器学习中占有相当重要的地位。在实际应用当中，可以说特征工程是机器学习成功的关键。在实际应用当中，可以说特征工程是机器学习成功的关键。纵观Kaggle、KDD等国内外大大小小的比赛，每个竞赛的冠军其实并没有用到很高深的算法，大多数都是在特征工程这个环节做出了出色的工作，然后使用一些常见的算法，比如LR，就能得到出色的性能。遗憾的是，在很多的书籍中并没有直接提到特征工程，更多的是&lt;strong&gt;特征选择&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.amorness.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础知识" scheme="https://www.amorness.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="机器学习" scheme="https://www.amorness.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征工程" scheme="https://www.amorness.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>机器学习项目完整流程</title>
    <link href="https://www.amorness.com/2019/03/22/MLfirst/"/>
    <id>https://www.amorness.com/2019/03/22/MLfirst/</id>
    <published>2019-03-22T07:20:49.000Z</published>
    <updated>2019-03-22T08:19:28.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习项目工作流程"><a href="#机器学习项目工作流程" class="headerlink" title="机器学习项目工作流程"></a>机器学习项目工作流程</h1><p>作为一个刚刚接触Machine learning的小菜鸟来说，一开始并不是噼里啪啦的直接敲代码，机器学习的数据训练过程往往会耗费大量时间。一个很好的工作流程能帮助我们更好地使用机器学习工具来处理实际问题。</p><a id="more"></a><h2 id="1-抽象为数学问题"><a href="#1-抽象为数学问题" class="headerlink" title="1.抽象为数学问题"></a>1.抽象为数学问题</h2><p>理解实际需要处理的问题是机器学习的第一步，机器学习中的特征工程和模型训练都需要耗费大量的时间，深入理解要处理的问题，从整体框架上构思，能够让我们避免走很多弯路。理解问题，主要包括明确可以获得的数据，以及我们的目标是什么。</p><p>机器学习的目标通常可以分为<strong>回归</strong>、<strong>分类</strong>、<strong>聚类</strong>。如果都不是，我们则需要考虑把它转换成机器学习问题。</p><h2 id="2-获取数据"><a href="#2-获取数据" class="headerlink" title="2.获取数据"></a>2.获取数据</h2><p>获取数据主要包括<strong>获取原始数据</strong>以及<strong>经过特征工程后提取的训练数据、测试数据</strong>。”<strong>数据决定机器学习结果的上限，而算法只是尽可能的逼近这个上限</strong>“，可见数据对于机器学习的重要性。</p><p>总的来说，数据要具有<strong>“代表性”</strong>，否则数据会存在<strong>过拟合(overfitting)</strong>。对于分类问题，数据偏斜不能过于严重，不同类别的数据不要有数个数量级的差距。不仅如此，还要对<strong>数据的量级</strong>有一个评估，有多少的样本，有多少个特征，从中可以估算出对<strong>内存</strong>的消耗程度，判断训练过程中内存是否能够放得下。</p><p>如果数据量太大可以考虑<strong>减少训练样本</strong>、<strong>改进算法</strong>或者一些<strong>降维</strong>的方法。如果数据量实在太大，导致前面一些方法都不能有所改进，就只能考虑<strong>分布式</strong>了。</p><h2 id="3-特征工程"><a href="#3-特征工程" class="headerlink" title="3.特征工程"></a>3.特征工程</h2><p>良好的数据要是能够提取出良好的特征才能真正发挥作用。</p><p>特征工程是一个非常能体现机器学习者功底的过程。特征工程包括从原始数据中<strong>特征构建、特征提取、特征选择</strong>。深入理解实际业务场景下的问题，丰富的机器学习经验能帮助我们更好的处理特征工程。特征工程做得好，往往能够使得算法的效果和性能得到显著的提升，有时能使简单的模型的效果比复杂的模型效果好。</p><p><strong>数据预处理、数据清洗</strong>是很关键的步骤，往往能够使得算法的效果和性能得到显著提高。<strong>归一化、离散化、因子化、缺失值处理、去除共线性</strong>等，数据挖掘过程中很多时间就花在它们上面。这些工作简单可复制，收益稳定可预期，是机器学习的基础必备步骤。</p><p><strong>筛选出显著特征、摒弃非显著特征</strong>，需要机器学习工程师反复理解业务。这对很多结果有决定性的影响。特征选择需要运用特征有效性分析的相关技术，如<strong>相关系数、卡方检验、平均互信息、条件熵、后验概率、逻辑回归权重</strong>等方法。</p><h2 id="4-模型训练、诊断、调优"><a href="#4-模型训练、诊断、调优" class="headerlink" title="4.模型训练、诊断、调优"></a>4.模型训练、诊断、调优</h2><p>现在有很多的机器学习算法的工具包，例如sklearn，使用非常方便，<strong>真正考验水平的是根据对算法的理解调节（超）参数，使模型达到最优</strong>。</p><p><strong>过拟合、欠拟合</strong>的模型状态判断是模型诊断中至关重要的一步。常见的方法如：<strong>交叉验证，绘制学习曲线</strong>等。过拟合的基本调优思路是<strong>增加训练的数据量，降低模型复杂度</strong>。欠拟合的基本调优思路是<strong>提高特征数量和质量，增加模型复杂度</strong>。 </p><p>诊断后的模型需要进行进一步调优，调优后的新模型需要重新诊断，这是一个反复迭代不断逼近的过程，需要不断的尝试，进而达到最优的状态。</p><h2 id="5-模型验证、误差分析"><a href="#5-模型验证、误差分析" class="headerlink" title="5.模型验证、误差分析"></a>5.模型验证、误差分析</h2><p><strong>模型验证</strong>和<strong>误差分析</strong>也是机器学习中非常重要的一步。</p><p>通过测试数据，验证模型的有效性，通过观察误差样本，分析误差产生的原因（是<strong>参数</strong>的问题还是<strong>算法选择</strong>的问题，是<strong>特征</strong>的问题还是<strong>数据</strong>本身的问题 …），往往能使得我们找到提升算法性能的突破点。</p><p>误差分析主要是分析出误差来源于<strong>算法 、特征 、数据</strong>。</p><h2 id="6-模型融合"><a href="#6-模型融合" class="headerlink" title="6.模型融合"></a>6.模型融合</h2><p>一般来说实际中，成熟的机器算法也就那么一些。工程上，提升算法的准确度主要方法是模型的前端（<strong>特征工程、清洗、预处理、采样</strong>）和后端的模型融合。因为他们比较标准可复制，效果比较稳定。而直接调参的工作不会很多，毕竟大量数据训练起来太慢了，而且效果难以保证。</p><p>模型融合的方法，主要包括一人一票的<strong>统一融合，线性融合和堆融合</strong>。</p><p>在机器学习中模型融合非常常见，基本都能使得效果有一定的提升，而且效果很好。</p><h2 id="7-上线运行"><a href="#7-上线运行" class="headerlink" title="7.上线运行"></a>7.上线运行</h2><p>这一部分内容主要跟工程实现的相关性比较大。工程上是结果导向，模型在线上运行的效果直接决定模型的成败。不单纯包括其<strong>准确程度、误差</strong>等情况，还包括其<strong>运行的速度(时间复杂度)、资源消耗程度（空间复杂度）、稳定性</strong>是否可接受。</p><hr><p>这些工作流程主要是工程实践上总结出的一些经验，并不是每个项目都包含完整的一个流程。这里的部分只是一个指导性的说明，只有大家自己多实践，多积累项目经验，才会有自己更深刻的认识。 </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>机器学习项目流程 <a href="http://www.cnblogs.com/wxquare/p/5484690.html" target="_blank" rel="noopener">http://www.cnblogs.com/wxquare/p/5484690.html</a></p><p>一个完整机器学习项目流程总结<a href="https://www.jianshu.com/p/ecb89148ed64" target="_blank" rel="noopener">https://www.jianshu.com/p/ecb89148ed64</a></p><p>完整机器学习项目的工作流程<a href="https://ask.julyedu.com/question/7013" target="_blank" rel="noopener">https://ask.julyedu.com/question/7013</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;机器学习项目工作流程&quot;&gt;&lt;a href=&quot;#机器学习项目工作流程&quot; class=&quot;headerlink&quot; title=&quot;机器学习项目工作流程&quot;&gt;&lt;/a&gt;机器学习项目工作流程&lt;/h1&gt;&lt;p&gt;作为一个刚刚接触Machine learning的小菜鸟来说，一开始并不是噼里啪啦的直接敲代码，机器学习的数据训练过程往往会耗费大量时间。一个很好的工作流程能帮助我们更好地使用机器学习工具来处理实际问题。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.amorness.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础知识" scheme="https://www.amorness.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="机器学习" scheme="https://www.amorness.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="项目流程" scheme="https://www.amorness.com/tags/%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
</feed>
